I"<ul id="markdown-toc">
  <li><a href="#几种树" id="markdown-toc-几种树">几种树</a></li>
</ul>

<h1 id="几种树">几种树</h1>
<p>二叉搜索树(基础) ==&gt; AVL(需要左右旋以保持平衡) ==&gt; B/B+(多叉树,自平衡) ==&gt; 红黑树(平衡)</p>

<p><strong>B 树</strong>可以看作是对2-3查找树的一种扩展，即他允许每个节点有M-1个子节点。
阶数表示了一个结点最多有多少个孩子结点，一般用字母m表示阶数
http://www.cnblogs.com/nullzx/p/8729425.html
一颗m阶的B树定义如下：</p>

<p>1）每个结点最多有m-1个关键字。</p>

<p>2）根结点最少可以只有1个关键字。</p>

<p>3）非根结点至少有Math.ceil(m/2)-1个关键字。</p>

<p>4）每个结点中的关键字都按照从小到大的顺序排列，每个关键字的左子树中的所有关键字都小于它，而右子树中的所有关键字都大于它。</p>

<p>5）所有叶子结点都位于同一层，或者说根结点到每个叶子结点的长度都相同。
在实际应用中的B树的阶数m都非常大（通常大于100），所以即使存储大量的数据，B树的高度仍然比较小</p>

<p><strong>B+</strong>树是对B树的一种变形树，它与B树的差异在于：</p>

<ul>
  <li>有k个子结点的结点必然有k个关键码；</li>
  <li>非叶结点仅具有索引作用，跟记录有关的信息均存放在叶结点中。</li>
  <li>树的所有叶结点构成一个有序链表，可以按照关键码排序的次序遍历全部记录。</li>
</ul>
:ET